package rip.helium.module.modules.exploits;

import java.util.ArrayList;

import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import rip.helium.event.EventTarget;
import rip.helium.event.events.impl.network.PacketSendEvent;
import rip.helium.event.events.impl.player.MoveEvent;
import rip.helium.event.events.impl.player.UpdateEvent;
import rip.helium.module.Module;
import rip.helium.setting.Setting;
import rip.helium.utils.render.ColorUtils;

public class Disabler extends Module {

	private Setting mode;
	
	public Disabler(int bind, String name, Category category) {
		super(bind, name, category);
		this.setColor(ColorUtils.generateColor());
		
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("Ghostly");
		
		this.mode = new Setting("Mode", this, "Ghostly", modes);
		
		mc.hackedClient.getSettingManager().addSetting(mode);
	}
	
	@EventTarget
	public void onUpdatePre(UpdateEvent event) {
		this.setSuffix(this.mode.getValString());
	}
	
	@EventTarget
	public void onMove(MoveEvent event) {
		switch(this.mode.getValString()) {
			case "Ghostly":
				mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive(0));
				if (mc.thePlayer.ticksExisted % 3 == 0) {
					mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
					mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
				}
				break;
		}
	}
	
	@EventTarget
	public void onPacketSend(PacketSendEvent event) {
		switch(this.mode.getValString()) {
			case "Ghostly":
				if (event.getPacket() instanceof S00PacketKeepAlive) {
					event.setCancelled(true);
				}
				if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
					event.setCancelled(true);
				}
				if (event.getPacket() instanceof C03PacketPlayer) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput());
				}
				if (event.getPacket() instanceof C0CPacketInput) {
					C0CPacketInput packet = (C0CPacketInput) event.getPacket();
					packet.forwardSpeed = Float.MAX_VALUE;
					packet.strafeSpeed = Float.MAX_VALUE;
					packet.jumping = (mc.thePlayer.ticksExisted % 2 == 0);
					packet.sneaking = (mc.thePlayer.ticksExisted % 2 != 0);
				}
				break;
		}
	}
	
}
