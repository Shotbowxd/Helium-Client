package rip.helium.module.modules.exploits;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;

import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import org.apache.commons.lang3.RandomUtils;
import rip.helium.event.EventTarget;
import rip.helium.event.events.impl.network.PacketReceiveEvent;
import rip.helium.event.events.impl.network.PacketSendEvent;
import rip.helium.event.events.impl.player.MoveEvent;
import rip.helium.event.events.impl.player.UpdateEvent;
import rip.helium.module.Module;
import rip.helium.setting.Setting;
import rip.helium.utils.client.Timer;
import rip.helium.utils.misc.MathUtils;
import rip.helium.utils.render.ColorUtils;

/* Disables Ghostly.live movement checks */
public class Disabler extends Module {

	private Setting mode;
	int confirmtranscounter = 0;
	ArrayList<Packet> transactions = new ArrayList<>();
	int currentTransaction = 0;

	private final Timer packetStopwatch = new Timer();

	private final Deque<Packet<?>> transactionQueue = new ArrayDeque<>();
	
	public Disabler(int bind, String name, Category category) {
		super(bind, name, category);
		this.setColor(ColorUtils.generateColor());
		
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("Ghostly");
		modes.add("Verus Combat");
		modes.add("Transaction");
		modes.add("Old Verus");
		modes.add("SunPvP");
		modes.add("CavePvP");
		modes.add("Watchdog");

		this.mode = new Setting("Mode", this, "Ghostly", modes);
		
		mc.hackedClient.getSettingManager().addSetting(mode);
	}

	@Override
	public void onEnable() {
		transactions.clear();
		currentTransaction = 0;
		confirmtranscounter = 0;
		super.onEnable();
	}

	@Override
	public void onDisable() {
		transactions.clear();
		currentTransaction = 0;
		confirmtranscounter = 0;
		super.onDisable();
	}

	@EventTarget
	public void onMove(MoveEvent event) {
		switch (mode.getValString()) {
			case "Watchdog": {
				if (mc.thePlayer.ticksExisted < 5)
					transactionQueue.clear();
				if (packetStopwatch.hasPassed(MathUtils.getRandomInRange(9000, 5000))) {
					while (transactionQueue.size() > 0)
						mc.getNetHandler().addToSendQueueNoEvent(transactionQueue.removeLast());
					final PlayerCapabilities playerCapabilities = new PlayerCapabilities();
					mc.getNetHandler().addToSendQueueNoEvent(new C13PacketPlayerAbilities(playerCapabilities));
					packetStopwatch.updateLastTime();
				}
				break;

			}
		}
	}

	@EventTarget
	public void onUpdateReceive(PacketReceiveEvent event) {
		switch (mode.getValString()) {
			case "Watchdog": {
				if(event.getPacket() instanceof S32PacketConfirmTransaction) {
					mc.getNetHandler().addToSendQueueNoEvent(new C10PacketCreativeInventoryAction());
				}
				break;
			}
		}
	}

	@EventTarget
	public void onUpdatePre(UpdateEvent event) {
		this.setSuffix(this.mode.getValString());
		switch (this.mode.getValString()) {
			case "CavePvP": {
				if(mc.thePlayer.ticksExisted % 100 == 0) {
					double rand = MathUtils.getRandomInRange(1000, 2000);
					mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ,
							mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
				}
				if(mc.thePlayer.ticksExisted % 50 == 0 && (transactions.size()-1) > currentTransaction) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(transactions.get(++currentTransaction));
				}
				break;
			}
			case "Old Verus":
			case "SunPvP": {
				if(mc.thePlayer.ticksExisted % 50 == 0) {
					double rand = MathUtils.getRandomInRange(1000, 2000);
					mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - rand, mc.thePlayer.posZ,
							mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
				}
				if(mc.thePlayer.ticksExisted % 120 == 0 && (transactions.size()-1) > currentTransaction) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(transactions.get(++currentTransaction));
				}
				break;
			}
			case "Transaction": {
				mc.timer.timerSpeed = 0.6F;
				if(mc.thePlayer.ticksExisted % 50 == 0 && (transactions.size()-1) > currentTransaction) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(transactions.get(++currentTransaction));
				}
				if(mc.thePlayer.ticksExisted % 500 == 0) {
					transactions.clear();
					currentTransaction = 0;
				}
				break;
			}
		}
	}
	
	@EventTarget
	public void onUpdate(MoveEvent event) {
		switch(this.mode.getValString()) {
			case "Ghostly": {
				mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive(0));
				if (mc.thePlayer.ticksExisted % 3 == 0) {
					mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
					mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
				}
				break;
			}
		}
	}
	
	@EventTarget
	public void onPacketSend(PacketSendEvent event) {
		switch(this.mode.getValString()) {
			case "Hypixel": {
				if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
					C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) event.getPacket();
					if (packetConfirmTransaction.getUid() < 0) {
						transactionQueue.push(event.getPacket());
						event.setCancelled(true);
					}
				}
				if (event.getPacket() instanceof C00PacketKeepAlive) {
					transactionQueue.push(event.getPacket());
					event.setCancelled(true);
				}

				if(mc.thePlayer.ticksExisted > 20){
					if(event.getPacket() instanceof S32PacketConfirmTransaction){
						S32PacketConfirmTransaction s32 = (S32PacketConfirmTransaction) event.getPacket();
						event.setCancelled(s32.getActionNumber() > 0 && mc.thePlayer.ticksExisted > 40);
					}
					if(mc.timer.timerSpeed > 1f && mc.thePlayer.ticksExisted % 18 == 0){
						mc.getNetHandler().addToSendQueueNoEvent(new C0CPacketInput(-Float.MIN_VALUE, Float.MAX_VALUE, mc.thePlayer.ticksExisted % 8 == 0 ? mc.thePlayer.ticksExisted % 16 == 0 ? true : false : false, mc.thePlayer.ticksExisted % 16 == 0 ? mc.thePlayer.ticksExisted % 8 == 0 ? true : false : false));
						mc.getNetHandler().addToSendQueueNoEvent(new C03PacketPlayer(false));
					}
				}
				break;
			}
			case "Ghostly": {
				if (event.getPacket() instanceof S00PacketKeepAlive) {
					event.setCancelled(true);
				}
				if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
					event.setCancelled(true);
				}
				if (event.getPacket() instanceof C03PacketPlayer) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput());
				}
				if (event.getPacket() instanceof C0CPacketInput) {
					C0CPacketInput packet = (C0CPacketInput) event.getPacket();
					packet.forwardSpeed = Float.MAX_VALUE;
					packet.strafeSpeed = Float.MAX_VALUE;
					packet.jumping = (mc.thePlayer.ticksExisted % 2 == 0);
					packet.sneaking = (mc.thePlayer.ticksExisted % 2 != 0);
				}
				break;
			}
			case "Verus Combat": {
				Packet packet = event.getPacket();
				if (packet instanceof C0FPacketConfirmTransaction) {
					if (mc.thePlayer.isDead) {
						confirmtranscounter = 0;
					}
					if (confirmtranscounter != 0) event.setCancelled(true);
					confirmtranscounter++;
				} else if (packet instanceof C0BPacketEntityAction) {
					event.setCancelled(true);
				}
				break;

			}
			case "Old Verus": {
				Packet packet = event.getPacket();

				if (packet instanceof C0FPacketConfirmTransaction) {
					transactions.add(packet);
					event.setCancelled(true);
				}

				if (packet instanceof C00PacketKeepAlive) {
					((C00PacketKeepAlive) packet).key -= MathUtils.getRandomInRange(1, 2147483647);
				}

				if (packet instanceof C03PacketPlayer) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput());
				}
				break;
			}
			case "ColdNetwork": {
				Packet packet = event.getPacket();

				if (packet instanceof C0FPacketConfirmTransaction) {
					transactions.add(packet);
					event.setCancelled(true);
				}

				if (packet instanceof C00PacketKeepAlive) {
					((C00PacketKeepAlive) packet).key -= MathUtils.getRandomInRange(1, 2147483647);
				}

				if (packet instanceof C03PacketPlayer) {
					C03PacketPlayer c03 = (C03PacketPlayer) packet;
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput());
					if (mc.thePlayer.ticksExisted % 15 == 0) {
						c03.y += MathUtils.getRandomInRange(100, 1000);
					}
				}
				break;
			}
			case "SunPvP":
			case "CavePvP": {
				Packet packet = event.getPacket();

				if (packet instanceof C0FPacketConfirmTransaction) {
					transactions.add(packet);
					event.setCancelled(true);
				}

				if (packet instanceof C0BPacketEntityAction) {
					event.setCancelled(true);
				}

				if (packet instanceof C00PacketKeepAlive) {
					((C00PacketKeepAlive) packet).key -= MathUtils.getRandomInRange(1, 2147483647);
					//event.setCancelled(true);
				}

				if (packet instanceof C03PacketPlayer) {
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput());
				}
				break;
			}//event.setCancelled(true);

		}
	}
	
}
